// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME dIafsdIcerndOchdIuserdIgdIgbakasdICRAB3mIjobs2016dICMSSW_8_0_6dIsrcdIUserCodedITopAnalysisdItestdIBoostedTop_2019dIParticleMatching_AngularDistribution_C_ACLiC_dict

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "/afs/cern.ch/user/g/gbakas/CRAB3-jobs2016/CMSSW_8_0_6/src/UserCode/TopAnalysis/test/BoostedTop_2019/./ParticleMatching_AngularDistribution.C"

// Header files passed via #pragma extra_include

namespace ROOT {
   static TClass *ParticleMatching_AngularDistribution_Dictionary();
   static void ParticleMatching_AngularDistribution_TClassManip(TClass*);
   static void *new_ParticleMatching_AngularDistribution(void *p = 0);
   static void *newArray_ParticleMatching_AngularDistribution(Long_t size, void *p);
   static void delete_ParticleMatching_AngularDistribution(void *p);
   static void deleteArray_ParticleMatching_AngularDistribution(void *p);
   static void destruct_ParticleMatching_AngularDistribution(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ParticleMatching_AngularDistribution*)
   {
      ::ParticleMatching_AngularDistribution *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ParticleMatching_AngularDistribution));
      static ::ROOT::TGenericClassInfo 
         instance("ParticleMatching_AngularDistribution", "ParticleMatching_AngularDistribution.h", 4,
                  typeid(::ParticleMatching_AngularDistribution), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &ParticleMatching_AngularDistribution_Dictionary, isa_proxy, 4,
                  sizeof(::ParticleMatching_AngularDistribution) );
      instance.SetNew(&new_ParticleMatching_AngularDistribution);
      instance.SetNewArray(&newArray_ParticleMatching_AngularDistribution);
      instance.SetDelete(&delete_ParticleMatching_AngularDistribution);
      instance.SetDeleteArray(&deleteArray_ParticleMatching_AngularDistribution);
      instance.SetDestructor(&destruct_ParticleMatching_AngularDistribution);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ParticleMatching_AngularDistribution*)
   {
      return GenerateInitInstanceLocal((::ParticleMatching_AngularDistribution*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ParticleMatching_AngularDistribution*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *ParticleMatching_AngularDistribution_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::ParticleMatching_AngularDistribution*)0x0)->GetClass();
      ParticleMatching_AngularDistribution_TClassManip(theClass);
   return theClass;
   }

   static void ParticleMatching_AngularDistribution_TClassManip(TClass* theClass){
      theClass->CreateAttributeMap();
      TDictAttributeMap* attrMap( theClass->GetAttributeMap() );
      attrMap->AddProperty("file_name","/afs/cern.ch/user/g/gbakas/CRAB3-jobs2016/CMSSW_8_0_6/src/UserCode/TopAnalysis/test/BoostedTop_2019/./ParticleMatching_AngularDistribution.h");
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_ParticleMatching_AngularDistribution(void *p) {
      return  p ? new(p) ::ParticleMatching_AngularDistribution : new ::ParticleMatching_AngularDistribution;
   }
   static void *newArray_ParticleMatching_AngularDistribution(Long_t nElements, void *p) {
      return p ? new(p) ::ParticleMatching_AngularDistribution[nElements] : new ::ParticleMatching_AngularDistribution[nElements];
   }
   // Wrapper around operator delete
   static void delete_ParticleMatching_AngularDistribution(void *p) {
      delete ((::ParticleMatching_AngularDistribution*)p);
   }
   static void deleteArray_ParticleMatching_AngularDistribution(void *p) {
      delete [] ((::ParticleMatching_AngularDistribution*)p);
   }
   static void destruct_ParticleMatching_AngularDistribution(void *p) {
      typedef ::ParticleMatching_AngularDistribution current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ParticleMatching_AngularDistribution

namespace ROOT {
   static TClass *vectorlEintgR_Dictionary();
   static void vectorlEintgR_TClassManip(TClass*);
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>));
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "vector", 214,
                  typeid(vector<int>), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *vectorlEintgR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
      vectorlEintgR_TClassManip(theClass);
   return theClass;
   }

   static void vectorlEintgR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   static TClass *vectorlEfloatgR_Dictionary();
   static void vectorlEfloatgR_TClassManip(TClass*);
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>));
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector", 214,
                  typeid(vector<float>), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *vectorlEfloatgR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
      vectorlEfloatgR_TClassManip(theClass);
   return theClass;
   }

   static void vectorlEfloatgR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

